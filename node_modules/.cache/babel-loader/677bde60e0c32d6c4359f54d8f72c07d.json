{"ast":null,"code":"import _classCallCheck from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"d:\\\\My\\\\react\\\\star-db\\\\src\\\\components\\\\random-planet\\\\random-planet.js\";\nimport React, { Component } from 'react';\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\nimport SwapiService from '../../services/swapi-service';\nimport './random-planet.css';\n\nvar RandomPlanet =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RandomPlanet, _Component);\n\n  function RandomPlanet() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RandomPlanet);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RandomPlanet)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.swapiService = new SwapiService();\n    _this.state = {\n      planet: {},\n      loading: true\n    };\n\n    _this.onPlanetLoaded = function (planet) {\n      _this.setState({\n        planet: planet,\n        loading: false,\n        error: false\n      });\n    };\n\n    _this.onError = function (err) {\n      _this.setState({\n        error: true,\n        loading: false\n      });\n    };\n\n    _this.updatePlanet = function () {\n      var id = Math.floor(Math.random() * 17) + 2;\n\n      _this.swapiService.getPlanet(id).then(_this.onPlanetLoaded).catch(_this.onError);\n    };\n\n    return _this;\n  }\n\n  _createClass(RandomPlanet, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updatePlanet();\n      this.interval = setInterval(this.updatePlanet, 10000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          planet = _this$state.planet,\n          loading = _this$state.loading,\n          error = _this$state.error;\n      var hasData = !(loading || error);\n      var errorMessage = error ? React.createElement(ErrorIndicator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }) : null;\n      var spinner = loading ? React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }) : null;\n      var content = hasData ? React.createElement(PlanetView, {\n        planet: planet,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }) : null;\n      return React.createElement(\"div\", {\n        className: \"random-planet jumbotron rounded\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, errorMessage, spinner, content);\n    }\n  }]);\n\n  return RandomPlanet;\n}(Component);\n\nexport { RandomPlanet as default };\n\nvar PlanetView = function PlanetView(_ref) {\n  var planet = _ref.planet;\n  var id = planet.id,\n      name = planet.name,\n      population = planet.population,\n      rotationPeriod = planet.rotationPeriod,\n      diameter = planet.diameter;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"planet-image\",\n    src: \"https://starwars-visualguide.com/assets/img/planets/\".concat(id, \".jpg\"),\n    alt: \"planet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, name), React.createElement(\"ul\", {\n    className: \"list-group list-group-flush\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Population\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, population)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Rotation Period\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, rotationPeriod)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"term\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Diameter\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, diameter)))));\n};","map":{"version":3,"sources":["d:\\My\\react\\star-db\\src\\components\\random-planet\\random-planet.js"],"names":["React","Component","Spinner","ErrorIndicator","SwapiService","RandomPlanet","swapiService","state","planet","loading","onPlanetLoaded","setState","error","onError","err","updatePlanet","id","Math","floor","random","getPlanet","then","catch","interval","setInterval","clearInterval","hasData","errorMessage","spinner","content","PlanetView","name","population","rotationPeriod","diameter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\nimport SwapiService from '../../services/swapi-service';\n\nimport './random-planet.css';\n\nexport default class RandomPlanet extends Component {\n\n  swapiService = new SwapiService();\n\n  state = {\n    planet: {},\n    loading: true\n  };\n\n  componentDidMount() {\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  onPlanetLoaded = (planet) => {\n    this.setState({\n      planet,\n      loading: false,\n      error: false\n    });\n  };\n\n  onError = (err) => {\n    this.setState({\n      error: true,\n      loading: false\n    });\n  };\n\n  updatePlanet = () => {\n    const id = Math.floor(Math.random()*17) + 2;\n    this.swapiService\n      .getPlanet(id)\n      .then(this.onPlanetLoaded)\n      .catch(this.onError);\n  };\n\n  render() {\n    const { planet, loading, error } = this.state;\n\n    const hasData = !(loading || error);\n\n    const errorMessage = error ? <ErrorIndicator/> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = hasData ? <PlanetView planet={planet}/> : null;\n\n    return (\n      <div className=\"random-planet jumbotron rounded\">\n        {errorMessage}\n        {spinner}\n        {content}\n      </div>\n    );\n  }\n}\n\nconst PlanetView = ({ planet }) => {\n\n  const { id, name, population,\n    rotationPeriod, diameter } = planet;\n\n  return (\n    <React.Fragment>\n      <img className=\"planet-image\"\n           src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}\n           alt=\"planet\" />\n      <div>\n        <h4>{name}</h4>\n        <ul className=\"list-group list-group-flush\">\n          <li className=\"list-group-item\">\n            <span className=\"term\">Population</span>\n            <span>{population}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Rotation Period</span>\n            <span>{rotationPeriod}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Diameter</span>\n            <span>{diameter}</span>\n          </li>\n        </ul>\n      </div>\n    </React.Fragment>\n  );\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}