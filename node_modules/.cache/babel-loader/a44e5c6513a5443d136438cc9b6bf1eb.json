{"ast":null,"code":"import _regeneratorRuntime from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"d:\\\\My\\\\react\\\\star-db\\\\src\\\\Componennt\\\\app\\\\app.js\";\nimport React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport SwapiService from '../../Services/swapi-service';\nimport Header from '../header'; //import ItomList from '../itom-list'\n//import PersonDetales from '../person-detales'\n\nimport RandomPlanet from '../random-planet'; //import StarShipDetales from '../starship-detales'\n\nimport PeoplePage from '../people_page/';\nimport './app.css';\nimport PlanetPage from '../planet-page/planet-page';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.swip = new SwapiService();\n    _this.state = {\n      //     person:{name:\"Choose some person\"},\n      personS: [],\n      planetS: [],\n      starShipS: [] //     list:[]\n\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getPeopleList();\n    } // setIdItem= (el,type)=>{\n    //      switch(type){\n    //             case \"people\":\n    //                  this.setState({person:this.state.personS[el-1]});\n    //                  break;\n    //             case \"planet\":\n    //                  this.setState({person:this.state.planetS[el-1]});\n    //                  break;\n    //             case \"starShip\":\n    //                  this.setState({person:this.state.starShipS[el-1]});\n    //                  break;\n    //             default:  this.setState({person:this.state.personS[el-1]});\n    //      }\n    // }\n    // setList=(list)=>{\n    //    switch(list){\n    //      case \"people\":\n    //           this.getPeopleList();\n    //           this.setState({person:{id:NaN,name:\"Choose some person\"}});\n    //           break;\n    //      case \"planet\":\n    //           this.getPlanetleList();\n    //           this.setState({person:{id:NaN,name:\"Choose some planet\"}});\n    //           break;\n    //      case \"starShip\":\n    //           this.getStarShipList();\n    //           this.setState({person:{id:NaN,name:\"Choose some Star ship\"}});\n    //           break;\n    //      default:    this.setState({person:{id:NaN}})\n    //    }\n    // }\n\n  }, {\n    key: \"getPeopleList\",\n    value: function getPeopleList() {\n      var _this2 = this;\n\n      var count = 1;\n      this.swip.getAllPeople().then(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(el) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _this2.setState({\n                    personS: el.map(function (el) {\n                      var newEl = {\n                        id: count,\n                        foto: \"https://starwars-visualguide.com/assets/img/characters/\".concat(count, \".jpg\"),\n                        name: el.name,\n                        data: [\"Gender :  \" + el.gender, \"Birth year :  \" + el.birth_year, \"Eye color :  \" + el.eye_color]\n                      };\n                      count++;\n                      return newEl;\n                    })\n                  });\n\n                case 2:\n                  _this2.setState({\n                    list: _this2.state.personS.map(function (el) {\n                      return {\n                        id: el.id,\n                        type: \"people\",\n                        pole: el.name + \" (\" + el.birth_year + \")\"\n                      };\n                    })\n                  });\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"getPlanetleList\",\n    value: function getPlanetleList() {\n      var _this3 = this;\n\n      var count = 1;\n      this.swip.getAllPlanets().then(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(el) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return _this3.setState({\n                    planetS: el.map(function (el) {\n                      var newEl = {\n                        id: count,\n                        foto: \"https://starwars-visualguide.com/assets/img/planets/\".concat(count, \".jpg\"),\n                        name: el.name,\n                        data: [\"Population :  \" + el.population, \"Rotatiion period :  \" + el.rotation_period, \"Diametr :  \" + el.diameter, \"Climate :  \" + el.climate, \"Surface water :  \" + el.surface_water]\n                      };\n                      count++;\n                      return newEl;\n                    })\n                  });\n\n                case 2:\n                  _this3.setState({\n                    list: _this3.state.planetS.map(function (elem) {\n                      return {\n                        id: elem.id,\n                        type: \"planet\",\n                        pole: elem.name\n                      };\n                    })\n                  });\n\n                case 3:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"getStarShipList\",\n    value: function getStarShipList() {\n      var _this4 = this;\n\n      var count = 1;\n      this.swip.getAllStarships().then(\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee3(el) {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return _this4.setState({\n                    starShipS: el.map(function (el) {\n                      var newEl = {\n                        id: count,\n                        foto: \"https://starwars-visualguide.com/assets/img/starships/\".concat(count + 6, \".jpg\"),\n                        name: el.name,\n                        data: [\"Model :  \" + el.model, \"Manufacturer :  \" + el.manufacturer, \"Cost in credits :  \" + el.cost_in_credits, \"Length :  \" + el.length, \"Crew :  \" + el.crew, \"Passengers :  \" + el.passengers, \"Pargo capacity :  \" + el.cargo_capacity]\n                      };\n                      count++;\n                      return newEl;\n                    })\n                  });\n\n                case 2:\n                  _this4.setState({\n                    list: _this4.state.starShipS.map(function (el) {\n                      return {\n                        id: el.id,\n                        type: \"starShip\",\n                        pole: el.name\n                      };\n                    })\n                  });\n\n                case 3:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"stardb-app \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Header, {\n        chouseList: this.setList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(RandomPlanet, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })), React.createElement(Route, {\n        path: \"/people\",\n        component: PeoplePage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/planet\",\n        component: PlanetPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component); // const somPage = () => {\n//      return (\n//           <div>\n//                <div className=\"row mb2 \">\n//                     <ItomList\n//                          usinItem={this.setIdItem}\n//                          peopleList={this.state.list} />\n//                </div>\n//                <div className=\"right-bar\">\n//                     <PersonDetales\n//                          person={this.state.person} />\n//                </div>\n//           </div>\n//      )\n// }\n\n\nexport { App as default };","map":{"version":3,"sources":["d:\\My\\react\\star-db\\src\\Componennt\\app\\app.js"],"names":["React","BrowserRouter","Router","Route","SwapiService","Header","RandomPlanet","PeoplePage","PlanetPage","App","swip","state","personS","planetS","starShipS","getPeopleList","count","getAllPeople","then","el","setState","map","newEl","id","foto","name","data","gender","birth_year","eye_color","list","type","pole","getAllPlanets","population","rotation_period","diameter","climate","surface_water","elem","getAllStarships","model","manufacturer","cost_in_credits","length","crew","passengers","cargo_capacity","setList","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\r\nimport SwapiService from '../../Services/swapi-service'\r\n\r\nimport Header from '../header'\r\n//import ItomList from '../itom-list'\r\n//import PersonDetales from '../person-detales'\r\nimport RandomPlanet from '../random-planet'\r\n//import StarShipDetales from '../starship-detales'\r\nimport PeoplePage from '../people_page/'\r\n\r\nimport './app.css'\r\nimport PlanetPage from '../planet-page/planet-page';\r\n\r\nexport default class App extends React.Component {\r\n\r\nswip = new SwapiService();     \r\nstate = {\r\n//     person:{name:\"Choose some person\"},\r\n     personS: [],\r\n     planetS:[],\r\n     starShipS:[],\r\n//     list:[]\r\n}\r\n\r\ncomponentDidMount(){\r\n     this.getPeopleList();\r\n}\r\n \r\n// setIdItem= (el,type)=>{\r\n//      switch(type){\r\n//             case \"people\":\r\n//                  this.setState({person:this.state.personS[el-1]});\r\n//                  break;\r\n//             case \"planet\":\r\n//                  this.setState({person:this.state.planetS[el-1]});\r\n//                  break;\r\n//             case \"starShip\":\r\n//                  this.setState({person:this.state.starShipS[el-1]});\r\n//                  break;\r\n//             default:  this.setState({person:this.state.personS[el-1]});\r\n//      }\r\n// }\r\n\r\n// setList=(list)=>{\r\n//    switch(list){\r\n//      case \"people\":\r\n//           this.getPeopleList();\r\n//           this.setState({person:{id:NaN,name:\"Choose some person\"}});\r\n//           break;\r\n//      case \"planet\":\r\n//           this.getPlanetleList();\r\n//           this.setState({person:{id:NaN,name:\"Choose some planet\"}});\r\n//           break;\r\n//      case \"starShip\":\r\n//           this.getStarShipList();\r\n//           this.setState({person:{id:NaN,name:\"Choose some Star ship\"}});\r\n//           break;\r\n//      default:    this.setState({person:{id:NaN}})\r\n//    }\r\n// }\r\n\r\ngetPeopleList(){\r\n     let count=1; \r\n     \r\n     this.swip.getAllPeople().then(async (el)=>{\r\n         await this.setState({personS:el.map((el)=>{\r\n               const newEl = {id:count,\r\n                              foto: `https://starwars-visualguide.com/assets/img/characters/${count}.jpg`,\r\n                              name:el.name, \r\n                              data: \r\n                              [\"Gender :  \"+el.gender, \r\n                              \"Birth year :  \"+el.birth_year,\r\n                              \"Eye color :  \"+el.eye_color]};\r\n               count++;\r\n         return newEl})});\r\n     this.setState({list:this.state.personS.map((el)=>{ \r\n          return {id:el.id, type:\"people\",pole:el.name+\" (\"+el.birth_year+\")\"}})})\r\n });}\r\n\r\n getPlanetleList(){\r\n     let count=1; \r\n     \r\n     this.swip.getAllPlanets().then(async (el)=>{\r\n         await this.setState({planetS:el.map((el)=>{\r\n               const newEl = {id:count,\r\n                              foto: `https://starwars-visualguide.com/assets/img/planets/${count}.jpg`,\r\n                              name:el.name,\r\n                              data:\r\n                              [\"Population :  \"+el.population,\r\n                              \"Rotatiion period :  \"+el.rotation_period,\r\n                              \"Diametr :  \"+el.diameter,\r\n                              \"Climate :  \"+el.climate,\r\n                              \"Surface water :  \"+el.surface_water]};\r\n               count++;\r\n         return newEl})});\r\n     this.setState({list:this.state.planetS.map((elem)=>{ \r\n          return {id:elem.id, type:\"planet\",pole:elem.name}})})\r\n });}\r\n\r\n getStarShipList(){\r\n     let count=1; \r\n     \r\n     this.swip.getAllStarships().then(async (el)=>{\r\n         await this.setState({starShipS:el.map((el)=>{\r\n               const newEl = {id:count,\r\n                              foto:`https://starwars-visualguide.com/assets/img/starships/${count+6}.jpg`,\r\n                              name:el.name,\r\n                              data:\r\n                              [\"Model :  \"+el.model,\r\n                              \"Manufacturer :  \"+el.manufacturer,\r\n                              \"Cost in credits :  \"+el.cost_in_credits,\r\n                              \"Length :  \"+el.length,\r\n                              \"Crew :  \"+el.crew,\r\n                              \"Passengers :  \"+el.passengers,\r\n                              \"Pargo capacity :  \"+el.cargo_capacity]};\r\n               count++;\r\n         return newEl})});\r\n     this.setState({list:this.state.starShipS.map((el)=>{ \r\n          return {id:el.id, type:\"starShip\",pole:el.name}})})\r\n });}\r\n\r\n     render() {\r\n\r\n          return (\r\n               <div>\r\n                 <Router>   \r\n                    <div className=\"stardb-app \">\r\n                         <Header\r\n                              chouseList={this.setList}     />\r\n                         <RandomPlanet />\r\n                    </div>\r\n                   <Route path= \"/people\" component = {PeoplePage}/> \r\n                   <Route path= \"/planet\" component = {PlanetPage}/> \r\n                    \r\n                  </Router>  \r\n               </div>\r\n          );\r\n     };\r\n}\r\n\r\n// const somPage = () => {\r\n//      return (\r\n//           <div>\r\n//                <div className=\"row mb2 \">\r\n//                     <ItomList\r\n//                          usinItem={this.setIdItem}\r\n//                          peopleList={this.state.list} />\r\n\r\n//                </div>\r\n//                <div className=\"right-bar\">\r\n//                     <PersonDetales\r\n//                          person={this.state.person} />\r\n//                </div>\r\n//           </div>\r\n\r\n//      )\r\n// }"]},"metadata":{},"sourceType":"module"}