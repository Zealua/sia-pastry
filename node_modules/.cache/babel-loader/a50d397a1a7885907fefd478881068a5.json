{"ast":null,"code":"import _regeneratorRuntime from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"d:\\\\My\\\\react\\\\star-db\\\\src\\\\Componennt\\\\app\\\\app.js\";\nimport React from 'react';\nimport SwapiService from '../../Services/swapi-service';\nimport Header from '../header';\nimport ItomList from '../itom-list';\nimport PersonDetales from '../person-detales';\nimport RandomPlanet from '../random-planet'; //import StarShipDetales from '../starship-detales'\n\nimport './app.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.swip = new SwapiService();\n    _this.state = {\n      person: {},\n      planet: {},\n      starShip: {},\n      personS: [],\n      planetS: [],\n      starShipS: [],\n      list: [] //{id:NaN,type:NaN,param:[]}\n\n    };\n\n    _this.setIdItem = function (el, type) {\n      _this.setState({\n        person: _this.state.personS[el - 1]\n      });\n\n      switch (type) {\n        case \"people\":\n          _this.setState({\n            person: _this.state.personS[el - 1]\n          });\n\n          break;\n\n        case \"planet\":\n          _this.setState({\n            person: _this.state.planetS[el - 1]\n          });\n\n          break;\n\n        case \"starShip\":\n          _this.setState({\n            person: _this.state.starShipS[el - 1]\n          });\n\n          break;\n\n        default:\n          _this.setState({\n            person: _this.state.personS[el - 1]\n          });\n\n      }\n    };\n\n    _this.setList = function (list) {\n      switch (list) {\n        case \"people\":\n          _this.getPeopleList();\n\n          break;\n\n        case \"planet\":\n          _this.getPlanetleList();\n\n          break;\n\n        case \"starShip\":\n          _this.getStarShipList();\n\n          break;\n\n        default:\n          _this.setState({});\n\n      }\n    };\n\n    _this.getPeopleList();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"getPeopleList\",\n    value: function getPeopleList() {\n      var _this2 = this;\n\n      var count = 1;\n      this.swip.getAllPeople().then(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(el) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _this2.setState({\n                    personS: el.map(function (el) {\n                      var newEl = {\n                        id: count,\n                        foto: \"https://starwars-visualguide.com/assets/img/characters/\".concat(count, \".jpg\"),\n                        name: el.name,\n                        data: [\"Gender :  \" + el.gender, \"Birth year :  \" + el.birth_year, \"Eye color :  \" + el.eye_color]\n                      };\n                      count++;\n                      return newEl;\n                    })\n                  });\n\n                case 2:\n                  _this2.setState({\n                    list: _this2.state.personS.map(function (el) {\n                      return {\n                        id: el.id,\n                        type: \"people\",\n                        pole: el.name + \" (\" + el.birth_year + \")\"\n                      };\n                    })\n                  });\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"getPlanetleList\",\n    value: function getPlanetleList() {\n      var _this3 = this;\n\n      var count = 1;\n      this.swip.getAllPlanets().then(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(el) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return _this3.setState({\n                    planetS: el.map(function (el) {\n                      var newEl = {\n                        id: count,\n                        foto: \"https://starwars-visualguide.com/assets/img/planets/\".concat(count, \".jpg\"),\n                        name: el.name,\n                        data: [\"Population :  \" + el.population, \"Rotatiion period :  \" + el.rotation_period, \"Diametr :  \" + el.diameter, \"Climate :  \" + el.climate, \"Surface water :  \" + el.surface_water]\n                      };\n                      count++;\n                      return newEl;\n                    })\n                  });\n\n                case 2:\n                  _this3.setState({\n                    list: _this3.state.planetS.map(function (elem) {\n                      return {\n                        id: elem.id,\n                        type: \"planet\",\n                        pole: elem.name\n                      };\n                    })\n                  });\n\n                case 3:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"getStarShipList\",\n    value: function getStarShipList() {\n      var _this4 = this;\n\n      var count = 1;\n      this.swip.getAllStarships().then(\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee3(el) {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return _this4.setState({\n                    starShipS: el.map(function (el) {\n                      var newEl = {\n                        id: count,\n                        foto: \"https://starwars-visualguide.com/assets/img/starships/\".concat(count + 6, \".jpg\"),\n                        name: el.name,\n                        data: [el.model, el.manufacturer, el.cost_in_credits, el.length, el.crew, el.passengers, el.cargo_capacity]\n                      };\n                      count++;\n                      console.log(newEl);\n                      return newEl;\n                    })\n                  });\n\n                case 2:\n                  _this4.setState({\n                    list: _this4.state.starShipS.map(function (el) {\n                      return {\n                        id: el.id,\n                        type: \"starShip\",\n                        pole: el.name\n                      };\n                    })\n                  });\n\n                case 3:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"stardb-app \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(Header, {\n        chouseList: this.setList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(RandomPlanet, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(ItomList, {\n        usinItem: this.setIdItem,\n        peopleList: this.state.list,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"right-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(PersonDetales, {\n        person: this.state.person,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["d:\\My\\react\\star-db\\src\\Componennt\\app\\app.js"],"names":["React","SwapiService","Header","ItomList","PersonDetales","RandomPlanet","App","swip","state","person","planet","starShip","personS","planetS","starShipS","list","setIdItem","el","type","setState","setList","getPeopleList","getPlanetleList","getStarShipList","count","getAllPeople","then","map","newEl","id","foto","name","data","gender","birth_year","eye_color","pole","getAllPlanets","population","rotation_period","diameter","climate","surface_water","elem","getAllStarships","model","manufacturer","cost_in_credits","length","crew","passengers","cargo_capacity","console","log","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport SwapiService from '../../Services/swapi-service'\r\n\r\nimport Header from '../header'\r\nimport ItomList from '../itom-list'\r\nimport PersonDetales from '../person-detales'\r\nimport RandomPlanet from '../random-planet'\r\n//import StarShipDetales from '../starship-detales'\r\n\r\nimport './app.css'\r\n\r\nexport default class App extends React.Component {\r\n\r\nswip = new SwapiService();     \r\nstate = {\r\n     person:{},\r\n     planet:{},\r\n     starShip:{},\r\n     personS: [],\r\n     planetS:[],\r\n     starShipS:[],\r\n     list:[]//{id:NaN,type:NaN,param:[]}\r\n}\r\n\r\nconstructor(){\r\n     super();\r\n     this.getPeopleList();\r\n}     \r\n\r\nsetIdItem= (el,type)=>{\r\n      this.setState({person:this.state.personS[el-1]});\r\n     switch(type){\r\n            case \"people\":\r\n                 this.setState({person:this.state.personS[el-1]});\r\n                 break;\r\n            case \"planet\":\r\n                 this.setState({person:this.state.planetS[el-1]});\r\n                 break;\r\n            case \"starShip\":\r\n                 this.setState({person:this.state.starShipS[el-1]});\r\n                 break;\r\n            default:  this.setState({person:this.state.personS[el-1]});\r\n     }\r\n}\r\n\r\nsetList=(list)=>{\r\n   switch(list){\r\n     case \"people\":\r\n          this.getPeopleList();\r\n          break;\r\n     case \"planet\":\r\n          this.getPlanetleList();\r\n          break;\r\n     case \"starShip\":\r\n          this.getStarShipList();\r\n          break;\r\n     default: this.setState({});\r\n   }\r\n}\r\n\r\ngetPeopleList(){\r\n     let count=1; \r\n     \r\n     this.swip.getAllPeople().then(async (el)=>{\r\n         await this.setState({personS:el.map((el)=>{\r\n               const newEl = {id:count,\r\n                              foto: `https://starwars-visualguide.com/assets/img/characters/${count}.jpg`,\r\n                              name:el.name, \r\n                              data: \r\n                              [\"Gender :  \"+el.gender, \r\n                              \"Birth year :  \"+el.birth_year,\r\n                              \"Eye color :  \"+el.eye_color]};\r\n               count++;\r\n         return newEl})});\r\n     this.setState({list:this.state.personS.map((el)=>{ \r\n          return {id:el.id, type:\"people\",pole:el.name+\" (\"+el.birth_year+\")\"}})})\r\n });}\r\n\r\n getPlanetleList(){\r\n     let count=1; \r\n     \r\n     this.swip.getAllPlanets().then(async (el)=>{\r\n         await this.setState({planetS:el.map((el)=>{\r\n               const newEl = {id:count,\r\n                              foto: `https://starwars-visualguide.com/assets/img/planets/${count}.jpg`,\r\n                              name:el.name,\r\n                              data:\r\n                              [\"Population :  \"+el.population,\r\n                              \"Rotatiion period :  \"+el.rotation_period,\r\n                              \"Diametr :  \"+el.diameter,\r\n                              \"Climate :  \"+el.climate,\r\n                              \"Surface water :  \"+el.surface_water]};\r\n               count++;\r\n         return newEl})});\r\n     this.setState({list:this.state.planetS.map((elem)=>{ \r\n          return {id:elem.id, type:\"planet\",pole:elem.name}})})\r\n });}\r\n\r\n getStarShipList(){\r\n     let count=1; \r\n     \r\n     this.swip.getAllStarships().then(async (el)=>{\r\n         await this.setState({starShipS:el.map((el)=>{\r\n               const newEl = {id:count,\r\n                              foto:`https://starwars-visualguide.com/assets/img/starships/${count+6}.jpg`,\r\n                              name:el.name,\r\n                              data:\r\n                              [el.model,\r\n                              el.manufacturer,\r\n                              el.cost_in_credits,\r\n                              el.length,\r\n                              el.crew,\r\n                              el.passengers,\r\n                              el.cargo_capacity]};\r\n               count++;\r\n               console.log(newEl);\r\n         return newEl})});\r\n     this.setState({list:this.state.starShipS.map((el)=>{ \r\n          return {id:el.id, type:\"starShip\",pole:el.name}})})\r\n });}\r\n\r\nrender(){\r\n\r\n  return(\r\n  <div>\r\n      <div className = \"stardb-app \">\r\n          <Header \r\n          chouseList={this.setList}/>\r\n          <RandomPlanet/>\r\n       </div>\r\n       <div className = \"row \">\r\n            <ItomList\r\n               usinItem={this.setIdItem}\r\n               peopleList={this.state.list}\r\n               />           \r\n       </div>\r\n       <div className=\"right-bar\">\r\n            <PersonDetales  \r\n               person={this.state.person}/>\r\n     </div>\r\n    </div>\r\n   );\r\n};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}