{"ast":null,"code":"import _regeneratorRuntime from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"d:\\\\My\\\\react\\\\star-db\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"d:\\\\My\\\\react\\\\star-db\\\\src\\\\Componennt\\\\app\\\\app.js\";\nimport React from 'react';\nimport SwapiService from '../../Services/swapi-service';\nimport Header from '../header';\nimport ItomList from '../itom-list';\nimport PersonDetales from '../person-detales';\nimport RandomPlanet from '../random-planet'; //import StarShipDetales from '../starship-detales'\n\nimport './app.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.swip = new SwapiService();\n    _this.state = {\n      person: {\n        name: \"Choose some person\"\n      },\n      personS: [],\n      planetS: [],\n      starShipS: [],\n      list: []\n    };\n\n    _this.setIdItem = function (el, type) {\n      switch (type) {\n        case \"people\":\n          _this.setState({\n            person: _this.state.personS[el - 1]\n          });\n\n          break;\n\n        case \"planet\":\n          _this.setState({\n            person: _this.state.planetS[el - 1]\n          });\n\n          break;\n\n        case \"starShip\":\n          _this.setState({\n            person: _this.state.starShipS[el - 1]\n          });\n\n          break;\n\n        default:\n          _this.setState({\n            person: _this.state.personS[el - 1]\n          });\n\n      }\n    };\n\n    _this.setList = function (list) {\n      switch (list) {\n        case \"people\":\n          _this.getPeopleList();\n\n          _this.setState({\n            person: {\n              id: NaN,\n              name: \"Choose some person\"\n            }\n          });\n\n          break;\n\n        case \"planet\":\n          _this.getPlanetleList();\n\n          _this.setState({\n            person: {\n              id: NaN,\n              name: \"Choose some planet\"\n            }\n          });\n\n          break;\n\n        case \"starShip\":\n          _this.getStarShipList();\n\n          _this.setState({\n            person: {\n              id: NaN,\n              name: \"Choose some Star ship\"\n            }\n          });\n\n          break;\n\n        default:\n          _this.setState({\n            person: {\n              id: NaN\n            }\n          });\n\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getPeopleList();\n    }\n  }, {\n    key: \"getPeopleList\",\n    value: function getPeopleList() {\n      var _this2 = this;\n\n      var count = 1;\n      this.swip.getAllPeople().then(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(el) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _this2.setState({\n                    personS: el.map(function (el) {\n                      var newEl = {\n                        id: count,\n                        foto: \"https://starwars-visualguide.com/assets/img/characters/\".concat(count, \".jpg\"),\n                        name: el.name,\n                        data: [\"Gender :  \" + el.gender, \"Birth year :  \" + el.birth_year, \"Eye color :  \" + el.eye_color]\n                      };\n                      count++;\n                      return newEl;\n                    })\n                  });\n\n                case 2:\n                  _this2.setState({\n                    list: _this2.state.personS.map(function (el) {\n                      return {\n                        id: el.id,\n                        type: \"people\",\n                        pole: el.name + \" (\" + el.birth_year + \")\"\n                      };\n                    })\n                  });\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"getPlanetleList\",\n    value: function getPlanetleList() {\n      var _this3 = this;\n\n      var count = 1;\n      this.swip.getAllPlanets().then(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(el) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return _this3.setState({\n                    planetS: el.map(function (el) {\n                      var newEl = {\n                        id: count,\n                        foto: \"https://starwars-visualguide.com/assets/img/planets/\".concat(count, \".jpg\"),\n                        name: el.name,\n                        data: [\"Population :  \" + el.population, \"Rotatiion period :  \" + el.rotation_period, \"Diametr :  \" + el.diameter, \"Climate :  \" + el.climate, \"Surface water :  \" + el.surface_water]\n                      };\n                      count++;\n                      return newEl;\n                    })\n                  });\n\n                case 2:\n                  _this3.setState({\n                    list: _this3.state.planetS.map(function (elem) {\n                      return {\n                        id: elem.id,\n                        type: \"planet\",\n                        pole: elem.name\n                      };\n                    })\n                  });\n\n                case 3:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"getStarShipList\",\n    value: function getStarShipList() {\n      var _this4 = this;\n\n      var count = 1;\n      this.swip.getAllStarships().then(\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee3(el) {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return _this4.setState({\n                    starShipS: el.map(function (el) {\n                      var newEl = {\n                        id: count,\n                        foto: \"https://starwars-visualguide.com/assets/img/starships/\".concat(count + 6, \".jpg\"),\n                        name: el.name,\n                        data: [\"Model :  \" + el.model, \"Manufacturer :  \" + el.manufacturer, \"Cost in credits :  \" + el.cost_in_credits, \"Length :  \" + el.length, \"Crew :  \" + el.crew, \"Passengers :  \" + el.passengers, \"Pargo capacity :  \" + el.cargo_capacity]\n                      };\n                      count++;\n                      return newEl;\n                    })\n                  });\n\n                case 2:\n                  _this4.setState({\n                    list: _this4.state.starShipS.map(function (el) {\n                      return {\n                        id: el.id,\n                        type: \"starShip\",\n                        pole: el.name\n                      };\n                    })\n                  });\n\n                case 3:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"stardb-app \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Header, {\n        chouseList: this.setList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(RandomPlanet, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row mb2 \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(ItomList, {\n        usinItem: this.setIdItem,\n        peopleList: this.state.list,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(PersonDetales, {\n        person: this.state.person,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(React.Component); // </div>\n// <div className=\"right-bar\">\n\n\nexport { App as default };","map":{"version":3,"sources":["d:\\My\\react\\star-db\\src\\Componennt\\app\\app.js"],"names":["React","SwapiService","Header","ItomList","PersonDetales","RandomPlanet","App","swip","state","person","name","personS","planetS","starShipS","list","setIdItem","el","type","setState","setList","getPeopleList","id","NaN","getPlanetleList","getStarShipList","count","getAllPeople","then","map","newEl","foto","data","gender","birth_year","eye_color","pole","getAllPlanets","population","rotation_period","diameter","climate","surface_water","elem","getAllStarships","model","manufacturer","cost_in_credits","length","crew","passengers","cargo_capacity","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport SwapiService from '../../Services/swapi-service'\r\n\r\nimport Header from '../header'\r\nimport ItomList from '../itom-list'\r\nimport PersonDetales from '../person-detales'\r\nimport RandomPlanet from '../random-planet'\r\n//import StarShipDetales from '../starship-detales'\r\n\r\nimport './app.css'\r\n\r\nexport default class App extends React.Component {\r\n\r\nswip = new SwapiService();     \r\nstate = {\r\n     person:{name:\"Choose some person\"},\r\n     personS: [],\r\n     planetS:[],\r\n     starShipS:[],\r\n     list:[]\r\n}\r\n\r\ncomponentDidMount(){\r\n     this.getPeopleList();\r\n}\r\n \r\nsetIdItem= (el,type)=>{\r\n     switch(type){\r\n            case \"people\":\r\n                 this.setState({person:this.state.personS[el-1]});\r\n                 break;\r\n            case \"planet\":\r\n                 this.setState({person:this.state.planetS[el-1]});\r\n                 break;\r\n            case \"starShip\":\r\n                 this.setState({person:this.state.starShipS[el-1]});\r\n                 break;\r\n            default:  this.setState({person:this.state.personS[el-1]});\r\n     }\r\n}\r\n\r\nsetList=(list)=>{\r\n   switch(list){\r\n     case \"people\":\r\n          this.getPeopleList();\r\n          this.setState({person:{id:NaN,name:\"Choose some person\"}});\r\n          break;\r\n     case \"planet\":\r\n          this.getPlanetleList();\r\n          this.setState({person:{id:NaN,name:\"Choose some planet\"}});\r\n          break;\r\n     case \"starShip\":\r\n          this.getStarShipList();\r\n          this.setState({person:{id:NaN,name:\"Choose some Star ship\"}});\r\n          break;\r\n     default:    this.setState({person:{id:NaN}})\r\n   }\r\n}\r\n\r\ngetPeopleList(){\r\n     let count=1; \r\n     \r\n     this.swip.getAllPeople().then(async (el)=>{\r\n         await this.setState({personS:el.map((el)=>{\r\n               const newEl = {id:count,\r\n                              foto: `https://starwars-visualguide.com/assets/img/characters/${count}.jpg`,\r\n                              name:el.name, \r\n                              data: \r\n                              [\"Gender :  \"+el.gender, \r\n                              \"Birth year :  \"+el.birth_year,\r\n                              \"Eye color :  \"+el.eye_color]};\r\n               count++;\r\n         return newEl})});\r\n     this.setState({list:this.state.personS.map((el)=>{ \r\n          return {id:el.id, type:\"people\",pole:el.name+\" (\"+el.birth_year+\")\"}})})\r\n });}\r\n\r\n getPlanetleList(){\r\n     let count=1; \r\n     \r\n     this.swip.getAllPlanets().then(async (el)=>{\r\n         await this.setState({planetS:el.map((el)=>{\r\n               const newEl = {id:count,\r\n                              foto: `https://starwars-visualguide.com/assets/img/planets/${count}.jpg`,\r\n                              name:el.name,\r\n                              data:\r\n                              [\"Population :  \"+el.population,\r\n                              \"Rotatiion period :  \"+el.rotation_period,\r\n                              \"Diametr :  \"+el.diameter,\r\n                              \"Climate :  \"+el.climate,\r\n                              \"Surface water :  \"+el.surface_water]};\r\n               count++;\r\n         return newEl})});\r\n     this.setState({list:this.state.planetS.map((elem)=>{ \r\n          return {id:elem.id, type:\"planet\",pole:elem.name}})})\r\n });}\r\n\r\n getStarShipList(){\r\n     let count=1; \r\n     \r\n     this.swip.getAllStarships().then(async (el)=>{\r\n         await this.setState({starShipS:el.map((el)=>{\r\n               const newEl = {id:count,\r\n                              foto:`https://starwars-visualguide.com/assets/img/starships/${count+6}.jpg`,\r\n                              name:el.name,\r\n                              data:\r\n                              [\"Model :  \"+el.model,\r\n                              \"Manufacturer :  \"+el.manufacturer,\r\n                              \"Cost in credits :  \"+el.cost_in_credits,\r\n                              \"Length :  \"+el.length,\r\n                              \"Crew :  \"+el.crew,\r\n                              \"Passengers :  \"+el.passengers,\r\n                              \"Pargo capacity :  \"+el.cargo_capacity]};\r\n               count++;\r\n         return newEl})});\r\n     this.setState({list:this.state.starShipS.map((el)=>{ \r\n          return {id:el.id, type:\"starShip\",pole:el.name}})})\r\n });}\r\n\r\n     render() {\r\n\r\n          return (\r\n               <div>\r\n                    <div className=\"stardb-app \">\r\n                         <Header\r\n                              chouseList={this.setList}     />\r\n                         <RandomPlanet />\r\n                    </div>\r\n                    <div className=\"row mb2 \">\r\n                        <div className=\"col-md-6\">\r\n                         <ItomList\r\n                              usinItem={this.setIdItem}\r\n                              peopleList={this.state.list}  />\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                         <PersonDetales\r\n                              person={this.state.person}    />\r\n                       </div>\r\n                    </div>\r\n               </div>\r\n          );\r\n     };\r\n}\r\n\r\n// </div>\r\n// <div className=\"right-bar\">"]},"metadata":{},"sourceType":"module"}